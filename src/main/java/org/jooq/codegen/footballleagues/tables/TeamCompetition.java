/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.footballleagues.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.footballleagues.FootballLeagues;
import org.jooq.codegen.footballleagues.Keys;
import org.jooq.codegen.footballleagues.tables.records.TeamCompetitionRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamCompetition extends TableImpl<TeamCompetitionRecord> {

    private static final long serialVersionUID = 788932490;

    /**
     * The reference instance of <code>football_leagues.team_competition</code>
     */
    public static final TeamCompetition TEAM_COMPETITION = new TeamCompetition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamCompetitionRecord> getRecordType() {
        return TeamCompetitionRecord.class;
    }

    /**
     * The column <code>football_leagues.team_competition.id</code>.
     */
    public final TableField<TeamCompetitionRecord, UShort> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>football_leagues.team_competition.team_id</code>.
     */
    public final TableField<TeamCompetitionRecord, UShort> TEAM_ID = createField(DSL.name("team_id"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>football_leagues.team_competition.competition_id</code>.
     */
    public final TableField<TeamCompetitionRecord, UShort> COMPETITION_ID = createField(DSL.name("competition_id"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>football_leagues.team_competition</code> table reference
     */
    public TeamCompetition() {
        this(DSL.name("team_competition"), null);
    }

    /**
     * Create an aliased <code>football_leagues.team_competition</code> table reference
     */
    public TeamCompetition(String alias) {
        this(DSL.name(alias), TEAM_COMPETITION);
    }

    /**
     * Create an aliased <code>football_leagues.team_competition</code> table reference
     */
    public TeamCompetition(Name alias) {
        this(alias, TEAM_COMPETITION);
    }

    private TeamCompetition(Name alias, Table<TeamCompetitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamCompetition(Name alias, Table<TeamCompetitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TeamCompetition(Table<O> child, ForeignKey<O, TeamCompetitionRecord> key) {
        super(child, key, TEAM_COMPETITION);
    }

    @Override
    public Schema getSchema() {
        return FootballLeagues.FOOTBALL_LEAGUES;
    }

    @Override
    public Identity<TeamCompetitionRecord, UShort> getIdentity() {
        return Keys.IDENTITY_TEAM_COMPETITION;
    }

    @Override
    public UniqueKey<TeamCompetitionRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_COMPETITION_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamCompetitionRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamCompetitionRecord>>asList(Keys.KEY_TEAM_COMPETITION_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeamCompetitionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamCompetitionRecord, ?>>asList(Keys.FK_TEAM_COMPETITION_ID, Keys.FK_COMPETITION_TEAM_ID);
    }

    public Team team() {
        return new Team(this, Keys.FK_TEAM_COMPETITION_ID);
    }

    public Competition competition() {
        return new Competition(this, Keys.FK_COMPETITION_TEAM_ID);
    }

    @Override
    public TeamCompetition as(String alias) {
        return new TeamCompetition(DSL.name(alias), this);
    }

    @Override
    public TeamCompetition as(Name alias) {
        return new TeamCompetition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamCompetition rename(String name) {
        return new TeamCompetition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamCompetition rename(Name name) {
        return new TeamCompetition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UShort, UShort, UShort> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
