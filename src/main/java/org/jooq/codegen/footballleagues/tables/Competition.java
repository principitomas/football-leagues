/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.footballleagues.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.footballleagues.FootballLeagues;
import org.jooq.codegen.footballleagues.Keys;
import org.jooq.codegen.footballleagues.tables.records.CompetitionRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Competition extends TableImpl<CompetitionRecord> {

    private static final long serialVersionUID = 311074065;

    /**
     * The reference instance of <code>football_leagues.competition</code>
     */
    public static final Competition COMPETITION = new Competition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompetitionRecord> getRecordType() {
        return CompetitionRecord.class;
    }

    /**
     * The column <code>football_leagues.competition.id</code>.
     */
    public final TableField<CompetitionRecord, UShort> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>football_leagues.competition.name</code>.
     */
    public final TableField<CompetitionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>football_leagues.competition.code</code>.
     */
    public final TableField<CompetitionRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>football_leagues.competition.area_name</code>.
     */
    public final TableField<CompetitionRecord, String> AREA_NAME = createField(DSL.name("area_name"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * Create a <code>football_leagues.competition</code> table reference
     */
    public Competition() {
        this(DSL.name("competition"), null);
    }

    /**
     * Create an aliased <code>football_leagues.competition</code> table reference
     */
    public Competition(String alias) {
        this(DSL.name(alias), COMPETITION);
    }

    /**
     * Create an aliased <code>football_leagues.competition</code> table reference
     */
    public Competition(Name alias) {
        this(alias, COMPETITION);
    }

    private Competition(Name alias, Table<CompetitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Competition(Name alias, Table<CompetitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Competition(Table<O> child, ForeignKey<O, CompetitionRecord> key) {
        super(child, key, COMPETITION);
    }

    @Override
    public Schema getSchema() {
        return FootballLeagues.FOOTBALL_LEAGUES;
    }

    @Override
    public Identity<CompetitionRecord, UShort> getIdentity() {
        return Keys.IDENTITY_COMPETITION;
    }

    @Override
    public UniqueKey<CompetitionRecord> getPrimaryKey() {
        return Keys.KEY_COMPETITION_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompetitionRecord>> getKeys() {
        return Arrays.<UniqueKey<CompetitionRecord>>asList(Keys.KEY_COMPETITION_PRIMARY, Keys.KEY_COMPETITION_CODE);
    }

    @Override
    public Competition as(String alias) {
        return new Competition(DSL.name(alias), this);
    }

    @Override
    public Competition as(Name alias) {
        return new Competition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Competition rename(String name) {
        return new Competition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Competition rename(Name name) {
        return new Competition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UShort, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
